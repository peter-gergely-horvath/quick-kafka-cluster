

- name: Create Kafka SSL configuration files directory
  file:
    path: "{{ssl_files_directory}}"
    owner: "{{kafka_linux_user}}"
    group: "{{kafka_linux_group}}"
    state: directory
    mode: '0700'

- name: "Create Cluster CA files"
  command:
    argv:
      - openssl
      - req
      - -new
      - -x509
      - -keyout
      - root.key
      - -out
      - root.crt
      - -days
      - 365
      - -subj
      - '/CN=ca.demo.localnet/OU=DEMO CA/O=SAMPLE/L=Vienna/S=Vienna/C=AT'
      - -passin
      - pass:{{ssl_key_password}}
      - -passout
      - pass:{{ssl_key_password}}
    creates: root.key
  when: " 'ssl_main_setup_host' in group_names"


- name: "Fetch Root CA key file to command host"
  fetch:
    flat: yes
    src: root.key
    dest: ./ssl/root.key
  when: " 'ssl_main_setup_host' in group_names"

- name: "Fetch Root CA certificate file to command host"
  fetch:
    flat: yes
    src: root.crt
    dest: ./ssl/root.crt
  when: " 'ssl_main_setup_host' in group_names"

- name: "Distribute CA certificate key to cluster nodes"
  copy:
    src: ./ssl/root.key
    dest: root.key
    mode: '0400'
  when: " 'ssl_main_setup_host' not in group_names"

- name: "Distribute CA certificate to cluster nodes"
  copy:
    src: ./ssl/root.crt
    dest: root.crt
    mode: '0400'
  when: " 'ssl_main_setup_host' not in group_names"


- name: Delete host certificate (if exists)
  ansible.builtin.command:
    argv:
      - keytool
      - -delete
      - -noprompt
      - -alias
      - "{{inventory_hostname}}"
      - -keystore
      - "{{ssl_keystore_location}}"
      - -storepass
      - "{{ssl_keystore_password}}"
  ignore_errors: yes


- name: "Generate server key"
  command:
    argv:
      - keytool
      - -genkey
      - -noprompt
      - -alias
      - "{{inventory_hostname}}"
      - -dname
      - "CN={{inventory_hostname}}, OU=DEMO, O=SAMPLE, L=Vienna, S=Vienna, C=AT"
      - -keystore
      - "{{ssl_keystore_location}}"
      - -keyalg
      - RSA
      - -storepass
      - "{{ssl_keystore_password}}"
      - -keypass
      - "{{ssl_key_password}}"
      - -ext
      - "SAN=DNS:{{inventory_hostname}}"

- name: Ensure there is no stale Server CSR file
  ansible.builtin.file:
    path: "{{inventory_hostname}}.csr"
    state: absent

- name: "Create Server CSR"
  command:
    argv:
      - keytool
      - -noprompt
      - -keystore
      - "{{ssl_keystore_location}}"
      - -alias
      - "{{inventory_hostname}}"
      - -certreq
      - -file
      - "{{inventory_hostname}}.csr"
      - -storepass
      - "{{ssl_keystore_password}}"
      - -keypass
      - "{{ssl_key_password}}"

- name: Ensure there is no stale Server Certificate file
  ansible.builtin.file:
    path: "{{inventory_hostname}}.crt"
    state: absent


- name: "Sign Server certificate"
  command:
    argv:
      - openssl
      - x509
      - -req
      - -CA
      - root.crt
      - -CAkey
      - root.key
      - -in
      - "{{inventory_hostname}}.csr"
      - -out
      - "{{inventory_hostname}}.crt"
      - -days
      - 365
      - -CAcreateserial
      - -passin
      - pass:{{ssl_key_password}}

- name: Delete CARoot certificate from truststore (if exists)
  ansible.builtin.command:
    argv:
      - keytool
      - -delete
      - -noprompt
      - -alias
      - CARoot
      - -keystore
      - "{{ssl_truststore_location}}"
      - -storepass
      - "{{ssl_truststore_password}}"
  ignore_errors: yes

- name: Delete CARoot certificate from keystore (if exists)
  ansible.builtin.command:
    argv:
      - keytool
      - -delete
      - -noprompt
      - -alias
      - CARoot
      - -keystore
      - "{{ssl_keystore_location}}"
      - -storepass
      - "{{ssl_keystore_password}}"
  ignore_errors: yes

- name: Delete server certificate from keystore (if exists)
  ansible.builtin.command:
    argv:
      - keytool
      - -delete
      - -noprompt
      - -alias
      - localhost
      - -keystore
      - "{{ssl_keystore_location}}"
      - -storepass
      - "{{ssl_keystore_password}}"
  ignore_errors: yes


- name: "Import root.crt to broker keystore"
  ansible.builtin.command:
    argv:
      - keytool
      - -noprompt
      - -keystore
      - "{{ssl_keystore_location}}"
      - -alias
      - CARoot
      - -import
      - -file
      - root.crt
      - -storepass
      - "{{ssl_keystore_password}}"
      - -keypass
      - "{{ssl_key_password}}"

- name: "Import server cert to broker keystore"
  ansible.builtin.command:
    argv:
      - keytool
      - -noprompt
      - -keystore
      - "{{ssl_keystore_location}}"
      - -alias
      - "{{inventory_hostname}}"
      - -import
      - -file
      - "{{inventory_hostname}}.crt"
      - -storepass
      - "{{ssl_keystore_password}}"
      - -keypass
      - "{{ssl_key_password}}"

- name: "Import root.crt to broker truststore"
  ansible.builtin.command:
    argv:
      - keytool
      - -noprompt
      - -keystore
      - "{{ssl_truststore_location}}"
      - -alias
      - CARoot
      - -import
      - -file
      - root.crt
      - -storepass
      - "{{ssl_truststore_password}}"
      - -keypass
      - "{{ssl_key_password}}"

- name: Change trust store ownership and access settings
  ansible.builtin.file:
    path: "{{ssl_truststore_location}}"
    owner: "{{kafka_linux_user}}"
    group: "{{kafka_linux_group}}"
    mode: '0600'

- name: Change key store ownership and access settings
  ansible.builtin.file:
    path: "{{ssl_keystore_location}}"
    owner: "{{kafka_linux_user}}"
    group: "{{kafka_linux_group}}"
    mode: '0600'


- name: Create Kafka client SSL configuration files directory
  file:
    path: "{{client_ssl_files_directory}}"
    owner: "{{kafka_linux_user}}"
    group: "{{kafka_linux_group}}"
    state: directory
    mode: '0755'

- name: Create SSL client truststore
  ansible.builtin.copy:
    remote_src: yes
    src: "{{ssl_truststore_location}}"
    dest: "{{client_ssl_truststore_location}}"
    owner: "{{kafka_linux_user}}"
    group: "{{kafka_linux_group}}"
    mode: '0644'

- name: Create SSL client keystore
  ansible.builtin.copy:
    remote_src: yes
    src: "{{ssl_keystore_location}}"
    dest: "{{client_ssl_keystore_location}}"
    owner: "{{kafka_linux_user}}"
    group: "{{kafka_linux_group}}"
    mode: '0644'

- name: "Create client SSL configuration"
  template:
    src: templates/client-ssl.properties.j2
    dest: "{{client_ssl_files_directory}}/client-ssl.properties"
    owner: "{{kafka_linux_user}}"
    group: "{{kafka_linux_group}}"
    mode: '0644'

- name: "Set trust store location in server.properties"
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '^ssl.truststore.location='
    line: ssl.truststore.location={{ssl_truststore_location}}


- name: "Set trust store password in server.properties"
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '^ssl.truststore.password='
    line: ssl.truststore.password={{ssl_truststore_password}}

- name: "Set key store location in server.properties"
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '^ssl.keystore.location='
    line: ssl.keystore.location={{ssl_keystore_location}}

- name: "Set key store password in server.properties"
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '^ssl.keystore.password='
    line: ssl.keystore.password={{ssl_keystore_password}}

- name: "Set key password in server.properties"
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '^ssl.key.password='
    line: ssl.key.password={{ssl_key_password}}

#- name: "Setting inter-broker communication protocol in server.properties"
#  lineinfile:
#    path: /opt/kafka/config/server.properties
#    path: /opt/kafka/config/server.properties
#    regexp: '^security.inter.broker.protocol='
#    line: security.inter.broker.protocol=PLAINTEXT
#
- name: "Configure listeners in server.properties"
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '^listeners='
    line: listeners=PLAINTEXT://0.0.0.0:9092,SSL://0.0.0.0:9093

- name: "Configure advertised listeners in server.properties"
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '^advertised.listeners='
    line: advertised.listeners=PLAINTEXT://{{inventory_hostname}}:9092,SSL://{{inventory_hostname}}:9093

- name: "Configure client authentication setting in server.properties"
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '^ssl.client.auth='
    line: ssl.client.auth=none


- name: Restart kafka service
  systemd:
    state: restarted
    name: kafka
