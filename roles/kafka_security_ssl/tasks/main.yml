

- name: Create Kafka SSL configuration files directory
  file:
    path: "{{ssl_files_directory}}"
    owner: "{{kafka_linux_user}}"
    group: "{{kafka_linux_group}}"
    state: directory
    mode: '0700'


- name: "Create Cluster CA certificate"
  command:
    argv:
      - openssl
      - req
      - -new
      - -x509
      - -keyout
      - ca-key
      - -out
      - ca-cert
      - -days
      - 3650
      - -passout
      - pass:'{{ssl_key_password}}'
      - -subj
      - "/C=AT/ST=Vienna/L=Vienna /O=Demo/OU=Demo CA/CN=FOOBAR/emailAddress=admin@demo.localnet"
    creates: ca-cert
  when: " 'ssl_main_setup_host' in group_names"

- name: "Fetch CA certificate file to command host"
  fetch:
    flat: yes
    src: ca-cert
    dest: ./ssl/ca-cert
  when: " 'ssl_main_setup_host' in group_names"

- name: "Distribute CA certificate file to cluster nodes"
  copy:
    src: ./ssl/ca-cert
    dest: ca-cert
    mode: '0400'
  when: " 'ssl_main_setup_host' not in group_names"

- name: "Import ca-cert to broker trust store"
  community.general.java_cert:
    cert_path: "ca-cert"
    keystore_path: "{{ssl_truststore_location}}"
    keystore_pass: "{{ssl_truststore_password}}"
    keystore_create: yes
    state: present
    cert_alias: CARoot
    trust_cacert: True

- name: "Import ca-cert to client trust store"
  become: no
  local_action:
    module: community.general.java_cert
    cert_path: "ssl/ca-cert"
    keystore_path: "ssl/kafka_client_truststore.jks"
    keystore_pass: "{{ssl_truststore_password}}"
    keystore_create: yes
    state: present
    cert_alias: CARoot
    trust_cacert: True

- name: Get current hostname
  shell: "hostname"
  register: ssl_hostname_command_result

- set_fact:
    ssl_hostname: "{{ssl_hostname_command_result.stdout}}"

# Apparently, community.general.java_cert does not cover all cases
# we need so, we resort to plain commands.

- name: Delete host certificate (if exists)
  ansible.builtin.command:
    argv:
      - keytool
      - -delete
      - -noprompt
      - -alias
      - localhost
      - -keystore
      - "{{ssl_keystore_location}}"
      - -storepass
      - "{{ssl_keystore_password}}"
  ignore_errors: yes

- name: Generate host certificate
  ansible.builtin.command:
    argv:
      - keytool
      - -keystore
      - "{{ssl_keystore_location}}"
      - -alias
      - localhost
      - -keyalg
      - RSA
      - -validity
      - 365
      - -genkey
      - -storepass
      - "{{ssl_keystore_password}}"
      - -keypass
      - "{{ssl_key_password}}"
      - -dname
      - "CN={{ssl_hostname}}"
      - -ext
      - "SAN=DNS:{{ssl_hostname}}"

- name: Delete certificate request file
  ansible.builtin.file:
    path: cert-file
    state: absent

- name: Create certificate request
  ansible.builtin.command:
    argv:
      - keytool
      - -keystore
      - "{{ssl_keystore_location}}"
      - -storepass
      - "{{ssl_keystore_password}}"
      - -alias
      - localhost
      - -certreq
      - -file
      - cert-file
    creates: cert-file

- name: "Fetch certificate requests to command host"
  fetch:
    src: cert-file
    dest: ./ssl/certificate-requests

- name: "Remove ssl directory"
  file:
    path: ssl
    state: absent

- name: "Upload host certificates to SSL CA utility host"
  copy:
    src: ./ssl/certificate-requests
    dest: ssl
    mode: '0500'
  when: " 'ssl_main_setup_host' in group_names"

- name: Find ini files
  find:
    paths: ssl/certificate-requests
    file_type: file
    recurse: Yes
  register: certificate_requests_files_matched
  when: " 'ssl_main_setup_host' in group_names"

- name: Debug certificate_requests_files_matched
  debug:
    var: certificate_requests_files_matched.files
  when: " 'ssl_main_setup_host' in group_names"

- name: Debug files_matched loop
  debug:
    var: item.path
  loop: "{{ certificate_requests_files_matched.files|flatten(levels=1) }}"
  loop_control:
    label: "{{ item.path }}"
  when: " 'ssl_main_setup_host' in group_names"

- name: Sign each host key
  ansible.builtin.command:
    argv:
      - openssl
      - x509
      - -req
      - -CA
      - ca-cert
      - -CAkey
      - ca-key
      - -in
      - "{{ item.path }}"
      - -out
      - "{{ item.path }}.signed"
      - -days
      - 365
      - -CAcreateserial
      - -passin
      - pass:'{{ssl_key_password}}'
  loop: "{{ certificate_requests_files_matched.files|flatten(levels=1) }}"
  when: " 'ssl_main_setup_host' in group_names"

- name: Find all signed certificate files
  find:
    paths: ssl/certificate-requests/
    patterns: "*.signed"
    recurse: yes
  register: signed_certificates_files_found
  when: " 'ssl_main_setup_host' in group_names"

- name: Debug signed_certificates_files_found loop
  debug:
    var: item.path
  loop: "{{ signed_certificates_files_found.files|flatten(levels=1) }}"
  loop_control:
    label: "{{ item.path }}"
  when: " 'ssl_main_setup_host' in group_names"

- name: Fetch signed certificate files to command host
  fetch:
    flat: yes
    src: "{{ item.path }}"
    dest: ./ssl/signed-certificates/{{ item.path | dirname  | basename }}.signed-cert.key
  with_items: "{{ signed_certificates_files_found.files }}"
  when: " 'ssl_main_setup_host' in group_names"

- name: "Distribute Signed certificate files to cluster nodes"
  copy:
    src: "./ssl/signed-certificates/{{inventory_hostname}}.signed-cert.key"
    dest: "{{inventory_hostname}}.signed-cert.key"


- name: Delete host certificate (if exists) from key store
  ansible.builtin.command:
    argv:
      - keytool
      - -delete
      - -noprompt
      - -alias
      - localhost
      - -keystore
      - "{{ssl_keystore_location}}"
      - -storepass
      - "{{ssl_keystore_password}}"
  ignore_errors: yes

- name: "Import host certificate to broker key store"
  community.general.java_cert:
    cert_path: "{{inventory_hostname}}.signed-cert.key"
    keystore_path: "{{ssl_keystore_location}}"
    keystore_pass: "{{ssl_keystore_password}}"
    keystore_create: yes
    state: present
    cert_alias: localhost

- name: Delete ca-cert (if exists) from key store
  ansible.builtin.command:
    argv:
      - keytool
      - -delete
      - -noprompt
      - -alias
      - CARoot
      - -keystore
      - "{{ssl_keystore_location}}"
      - -storepass
      - "{{ssl_keystore_password}}"
  ignore_errors: yes

- name: "Import ca-cert to broker key store"
  community.general.java_cert:
    cert_path: "ca-cert"
    keystore_path: "{{ssl_keystore_location}}"
    keystore_pass: "{{ssl_keystore_password}}"
    state: present
    cert_alias: CARoot
    trust_cacert: True